import numpy as np
from IPython import embed
from time import time
import torch
import math
import random

# xx = np.zeros(shape=(2,15,4), dtype=np.float)

# xx[0, 2, 2] = 1
# xx[1, 2, 2] = 0.5

# yy = xx[:,2,2].argsort()
# xx = xx[yy]
# embed()

# xx = np.ones(shape=(75,45))
# xx = xx.tolist()
# # xx.pop(0,20)
# del xx[0:20]
# embed()

# xx = {'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,
#         '17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,}

# st = time()
# if "0" in xx.keys():
#     et = time()
#     print(f"total {(et - st)}")

# def change_pose(pred_3d_bodys):
#     """[summary]

#     Args:
#         pred_3d_bodys ([type]): [description]
#         not original 

#     Returns:
#         [type]: [description]
#     """
#     pose_3d = []
#     for i in range(0,1):   # 默认都是1个人
#         for j in range(15):
#             pose_3d.append(pred_3d_bodys[i][j][0])  # x
#             pose_3d.append(pred_3d_bodys[i][j][1])  # y
#             pose_3d.append(pred_3d_bodys[i][j][2])  # z
#     return pose_3d
# xx = np.eye(3)
# yy = np.random.rand(1, 15,3)
# yy =yy.transpose(0,2,1)
# zz = xx @ yy
# zz[0,1] += 1
# zz[0,2] += 1
# embed()

# a = [1,2,3]
# b = [1,2,3]
# c = max(b)
# print(c)

# a = [[1,2,3],[1,2,3]]
# a = np.array(a)

# b = [[1,5,3],[0,0,0]]
# b = np.array(b)

# c = np.array([1,2,3])
# # print(sum(c))
# print(c)
# print(c.argmax(0))

# a = torch.tensor([1,2,3])
# a = 0


# xx = (1 / math.sqrt(2 * math.pi)) * math.exp((-1 / 2) * 0.13)
# xx = math.exp((-1 / 2) * 0.13)
# pri

# xx = random.randrange(30,54)
# print(xx)


# xx = np.array([[1,2,3],[1,2,3]])
# yy = np.delete(xx[:,:],1)
# embed()

# xx = np.array([[ -91.24533081,   -9.77925491,  267.06481934,    1.        ],
#        [ -82.04265594,  -31.73023224,  271.43804932,    1.        ],
#        [ -89.02472687,   40.83181763,  284.30203247,    1.        ],
#        [-104.65914917,  -12.89662933,  276.2901001 ,    1.        ],
#        [-109.66155243,    9.82787323,  289.22158813,    1.        ],
#        [ -85.39533997,    6.52565002,  293.66082764,    1.        ],
#        [ -97.42415619,   39.70267487,  290.0920105 ,    1.        ],
#        [-100.76938629,   71.71859741,  304.46191406,    1.        ],
#        [-110.30347443,  106.38193512,  312.63577271,    1.        ],
#        [ -77.77825165,   -7.06853485,  257.95681763,    1.        ],
#        [ -70.11280823,   17.82071495,  265.47302246,    1.        ],
#        [ -69.68502808,   12.14739037,  288.32354736,    1.        ],
#        [ -80.57032013,   41.87945175,  278.51196289,    1.        ],
#        [ -77.47626495,   75.3965683 ,  291.89306641,    1.        ],
#        [ -78.98562622,  109.38594055,  302.17233276,    1.        ]])

# yy = np.array([[ 195.16946411,  240.30853271,  270.02520752,    2.        ,
#          -97.80656433,   -8.6984005 ,  270.02520752, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 222.62481689,  187.98979187,  273.14260864,    2.        ,
#          -85.97328186,  -32.63896561,  273.14260864, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 213.34616089,  348.8364563 ,  293.92376709,    2.        ,
#          -97.53807831,   44.09518433,  293.92376709, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 173.70863342,  233.23698425,  280.52893066,    2.        ,
#         -112.50686646,  -12.4541378 ,  280.52893066, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 176.00830078,  279.80993652,  292.9100647 ,    2.        ,
#         -116.22911072,   10.05602646,  292.9100647 , 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 216.99163818,  286.08230591,  300.94900513,    2.        ,
#          -97.40164948,   13.34723759,  300.94900513, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 197.83638   ,  343.52972412,  299.24221802,    2.        ,
#         -107.50037384,   42.39523315,  299.24221802, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 207.59408569,  397.00366211,  315.77627563,    2.        ,
#         -108.87758636,   73.62127686,  315.77627563, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 202.59803772,  455.28015137,  322.55981445,    2.        ,
#         -115.69550323,  108.71553802,  322.55981445, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 215.68159485,  247.08103943,  260.17868042,    2.        ,
#          -84.7667923 ,   -5.39123869,  260.17868042, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 234.49308777,  303.28533936,  262.46777344,    2.        ,
#          -77.00579834,   19.09913254,  262.46777344, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 250.81388855,  287.89248657,  284.92578125,    2.        ,
#          -75.51580811,   13.37642765,  284.92578125, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 229.62341309,  354.34918213,  288.60528564,    2.        ,
#          -87.57569885,   45.7951622 ,  288.60528564, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 252.86502075,  412.93890381,  304.94400024,    2.        ,
#          -81.10929108,   78.66136169,  304.94400024, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904],
#        [ 265.61761475,  467.32778931,  317.81060791,    2.        ,
#          -78.63576508,  112.31228638,  317.81060791, 1427.33996582,
#         1423.13000488,  949.61798096,  548.13201904]])


# xx = xx[:,:3]
# yy = yy[:,4:7]
# error = np.linalg.norm(np.abs(xx - yy), axis=1)
# embed()

xx = torch.tensor([[1,2,3],
                   [2,1,1]])
yy = torch.tensor([[0,0,0],
                   [0,0,0]])
embed()